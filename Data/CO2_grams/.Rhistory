sub_temp11=V75,co2_sample11=V76,scd30_temp11=V77,rh11=V78,wall_temp11=V79,
sub_temp12=V82,co2_sample12=V83,scd30_temp12=V84,rh12=V85,wall_temp12=V86,
sub_temp13=V89,co2_sample13=V90,scd30_temp13=V91,rh13=V92,wall_temp13=V93,
sub_temp14=V96,co2_sample14=V97,scd30_temp14=V98,rh14=V99,wall_temp14=V100,
sub_temp15=V103,co2_sample15=V104,scd30_temp15=V105,rh15=V106,wall_temp15=V107,
sub_temp16=V110,co2_sample16=V111,scd30_temp16=V112,rh16=V113,wall_temp16=V114,
sub_temp17=V117,co2_sample17=V118,scd30_temp17=V119,rh17=V120,wall_temp17=V121)
##Setting all the columns except 1st to as numeric
data_master[, 2:ncol(data_master)] <- lapply(data_master
[,2:ncol(data_master)],
as.numeric)
#Setting the time boundaries of the dataset.
data_plug <- subset(data_master,
time >= as_datetime('2021-12-21 10:30:00') &
time <= as_datetime('2022-01-05 15:30:00'))
#Making a dataset with only sampled CO2 from the raw data
##The numbers are the order number of the columns pertaining to CO2 sampling.
dataco2_plug <- select(data_plug, c(1, 3, 8, 13, 18, 23, 28,
33, 38, 43, 48, 53,
58, 63, 68, 73, 78, 83))
#Reference CO2 stropped working for brief time; replacing NA with specific value "460"
dataco2_plug <- dataco2_plug%>%mutate_at(c(18), ~ifelse(is.na(.), 460, .))
dataco2_plug <- dataco2_plug%>%mutate_at(c(2:17), ~ifelse(is.na(.), 0, .))
##First, we need SCD30 temperature in Kelvin
convert_to_kelvin <- function(x, na.rm=FALSE) (x+273.15)
dataco2_plug <-  select(data_plug, c( 4, 9, 14, 19, 24, 29,
34, 39, 44, 49, 54,
59, 64, 69, 74, 79, 84))%>%
mutate_at(c(1:17),convert_to_kelvin, na.rm = TRUE)%>%
add_column(dataco2_plug, .before = 1)%>%
mutate_at(c(35), ~ifelse(is.na(.), 295, .))
#Calculating CO2-grams for each datapoint
{
dataco2_plug$co2_grams1 <- ((dataco2_plug$co2_sample1/dataco2_plug$scd30_temp1)*0.00001116657826)
dataco2_plug$co2_grams2 <- ((dataco2_plug$co2_sample2/dataco2_plug$scd30_temp2)*0.00001116657826)
dataco2_plug$co2_grams3 <- ((dataco2_plug$co2_sample3/dataco2_plug$scd30_temp3)*0.00001116657826)
dataco2_plug$co2_grams4 <- ((dataco2_plug$co2_sample4/dataco2_plug$scd30_temp4)*0.00001116657826)
dataco2_plug$co2_grams5 <- ((dataco2_plug$co2_sample5/dataco2_plug$scd30_temp5)*0.00001116657826)
dataco2_plug$co2_grams6 <- ((dataco2_plug$co2_sample6/dataco2_plug$scd30_temp6)*0.00001116657826)
dataco2_plug$co2_grams7 <- ((dataco2_plug$co2_sample7/dataco2_plug$scd30_temp7)*0.00001116657826)
dataco2_plug$co2_grams8 <- ((dataco2_plug$co2_sample8/dataco2_plug$scd30_temp8)*0.00001116657826)
dataco2_plug$co2_grams9 <- ((dataco2_plug$co2_sample9/dataco2_plug$scd30_temp9)*0.00001116657826)
dataco2_plug$co2_grams10 <- ((dataco2_plug$co2_sample10/dataco2_plug$scd30_temp10)*0.00001116657826)
dataco2_plug$co2_grams11 <- ((dataco2_plug$co2_sample11/dataco2_plug$scd30_temp11)*0.00001116657826)
dataco2_plug$co2_grams12 <- ((dataco2_plug$co2_sample12/dataco2_plug$scd30_temp12)*0.00001116657826)
dataco2_plug$co2_grams13 <- ((dataco2_plug$co2_sample13/dataco2_plug$scd30_temp13)*0.00001116657826)
dataco2_plug$co2_grams14 <- ((dataco2_plug$co2_sample14/dataco2_plug$scd30_temp14)*0.00001116657826)
dataco2_plug$co2_grams15 <- ((dataco2_plug$co2_sample15/dataco2_plug$scd30_temp15)*0.00001116657826)
dataco2_plug$co2_grams16 <- ((dataco2_plug$co2_sample16/dataco2_plug$scd30_temp16)*0.00001116657826)
dataco2_plug$co2_grams17 <- ((dataco2_plug$co2_sample17/dataco2_plug$scd30_temp17)*0.00001116657826)
}
dataco2_grams_plug <- dataco2_plug%>% select(-c(2:35))
#Making a dataset with "actual" CO2 readings (with ambient readings subtracted)
dataco2_grams_actual_plug <-  dataco2_grams_plug  %>%  mutate(dataco2_grams_plug[2:ncol(dataco2_grams_plug)] - co2_grams17)
#Converting all the negative values in the columns (in dataco2_actual) to zero.
##Assign the columns to be converted as "columns_to_convert".
columns_to_convert <- c(2:18)
#Mention the function: If negative>convert to 0; If not> let it be.
replace_with_zero <- function(x, na.rm=FALSE) (ifelse(x < 0, yes = 0, no = x))
##Choose the parent datafile (dataco2_actual) to be mutated at the columns assigned,
## as the predefined function.
dataco2_grams_actual_plug <- dataco2_grams_actual_plug %>% mutate_at(columns_to_convert,
replace_with_zero, na.rm = TRUE)%>%
rename_with( ~ gsub("sample", "actual", .x, fixed = TRUE), .cols = c(2:18))    #Renaming to substitute "sample" in the column names to "actual".
colnames(dataco2_grams_actual_plug)
head(dataco2_grams_actual_plug)
#Exporting the actual CO2 (ppm) datafile  as a .csv
write.csv(dataco2_grams_actual_plug,"CO2_grams/actual_co2_grams_plug.csv", row.names = FALSE)
librarian::shelf(tidyverse, ggplot2, dplyr, tibble, readr, lubridate, ggpubr,
scales, tidyr, rstudioapi,
update_all = FALSE)
##Setup working Directory
setwd(dirname(getActiveDocumentContext()$path))                                 # Set working directory to source file location
#Reading the co2 .csv file
co2_grams_peat <- read_csv("actual_co2_grams_peat.csv")
head(co2_grams_peat)
#Manipulating Time
##Setting first column as date-time variable
co2_grams_peat$time <- as_datetime(co2_grams_peat$time)
#Reducing the dataset by reducing sampling interval
groups <- cut(as.POSIXct(co2_grams_peat$time), breaks="30 min")
library(plyr)
co2_grams_peat <- ddply(co2_grams_peat, "groups", tail, 1)[, -1]
t1 <- co2_grams_peat %>%
select(time, co2_grams1, co2_grams13, co2_grams16) %>%
mutate(time = as_datetime(paste0(time, "-01"))) %>%
gather(vessel, co2_ppm, -time) %>%
filter(complete.cases(.))%>%
add_column(trmt = "peat")%>%
mutate(co2_ppm = co2_ppm/57.89)
# Converting "grams CO2 per gram" DM TO  "grams CO2 per kg DM"
t1$co2_ppm <- t1$co2_ppm*1000
#Reading the co2 .csv file
actual_co2_plug <- read_csv("actual_co2_grams_plug.csv")%>%as_tibble()
head(actual_co2_plug)
#Manipulating Time
##Setting first column as date-time variable
actual_co2_plug$time <- as_datetime(actual_co2_plug$time)
#Reducing the dataset by reducing sampling interval
groups <- cut(as.POSIXct(actual_co2_plug$time), breaks="30 min")
library(plyr)
actual_co2_plug <- ddply(actual_co2_plug, "groups", tail, 1)[, -1]
t2 <- actual_co2_plug %>%
select(time, co2_grams7, co2_grams10,  co2_grams16) %>%
mutate(time = as_datetime(paste0(time, "-01"))) %>%
gather(vessel, co2_ppm, -time) %>%
filter(complete.cases(.))%>%
add_column(trmt = "plug")%>%
mutate(co2_ppm = co2_ppm/47.7)   # dividing by total dry matter in the vessel
t2$co2_ppm <- t2$co2_ppm*1000
View(t2)
t2$co2_ppm <- t2$co2_ppm*1000
t2_time <- t2%>%select(c(1))
t1x <- t1%>%select(-c(1))%>%slice(c(1:2064))
t1x <- cbind(t2_time, t1x)
co2 <- rbind(t1x, t2)
# Making a combined plot with means and SEM
fig_plug <- ggplot(data=co2, aes(x=time, y=co2_ppm, color = trmt)) +
scale_y_continuous(limits = c(0,0.005), breaks=seq(0, 0.005,0.001))+
scale_x_datetime(
date_labels = c("1", "5", "10", "15"),
breaks = c(
as_datetime('2021-12-22 15:30:00'),
as_datetime('2021-12-26 15:30:00'),
as_datetime('2021-12-31 15:30:00'),
as_datetime('2022-01-05 15:30:00')
),
limits = c(
as_datetime('2021-12-21 15:30:00'),
as_datetime('2022-01-05 15:30:00')
)
) +
# labs(title = "Plug-based biowaste",x="Time (days)", y=expression(CO[2]~(g)/dry~matter~(kg)), color="Treatment")+
# theme_pubr()+
# theme(axis.text = element_text(size = 11),
#       axis.title = element_text(size = 12),
#       axis.line = element_line(size = 0.4))+
# theme(#legend.position = c(0.8, 0.75),
#   legend.direction = "horizontal",
#   legend.title = element_text(size = 12),
#   legend.text = element_text(size = 10),
#   legend.position="top")+
scale_fill_manual(name="",
labels = c("Mat-based", "Plug-based"),
values = c("#e41a1c", "#377eb8"),
guide = guide_legend())+
scale_color_manual(name="",
labels = c("Mat-based", "Plug-based"),
values = c("#e41a1c", "#377eb8"),
guide = guide_legend())+
stat_summary(aes(color=trmt), fun  = "mean", geom = "line", size=0.85)+
stat_summary(aes(fill=factor(trmt)),colour = NA, geom = "ribbon", fun.data = mean_se, alpha = 0.35)
fig_plug
View(t2)
View(t1)
#Reading the co2 .csv file
co2_grams_peat <- read_csv("actual_co2_grams_peat.csv")
head(co2_grams_peat)
#Manipulating Time
##Setting first column as date-time variable
co2_grams_peat$time <- as_datetime(co2_grams_peat$time)
#Reducing the dataset by reducing sampling interval
groups <- cut(as.POSIXct(co2_grams_peat$time), breaks="30 min")
library(plyr)
co2_grams_peat <- ddply(co2_grams_peat, "groups", tail, 1)[, -1]
t1 <- co2_grams_peat %>%
select(time, co2_grams1, co2_grams13, co2_grams16) %>%
mutate(time = as_datetime(paste0(time, "-01"))) %>%
gather(vessel, co2_ppm, -time) %>%
filter(complete.cases(.))%>%
add_column(trmt = "peat")%>%
mutate(co2_ppm = co2_ppm/57.89)
# Converting "grams CO2 per gram" DM TO  "grams CO2 per kg DM"
t1$co2_ppm <- t1$co2_ppm*1000
#Reading the co2 .csv file
actual_co2_plug <- read_csv("actual_co2_grams_plug.csv")%>%as_tibble()
head(actual_co2_plug)
#Manipulating Time
##Setting first column as date-time variable
actual_co2_plug$time <- as_datetime(actual_co2_plug$time)
#Reducing the dataset by reducing sampling interval
groups <- cut(as.POSIXct(actual_co2_plug$time), breaks="30 min")
library(plyr)
actual_co2_plug <- ddply(actual_co2_plug, "groups", tail, 1)[, -1]
t2 <- actual_co2_plug %>%
select(time, co2_grams7, co2_grams10,  co2_grams16) %>%
mutate(time = as_datetime(paste0(time, "-01"))) %>%
gather(vessel, co2_ppm, -time) %>%
filter(complete.cases(.))%>%
add_column(trmt = "plug")%>%
mutate(co2_ppm = co2_ppm/47.7)   # dividing by total dry matter in the vessel
t2$co2_ppm <- t2$co2_ppm*1000
t2_time <- t2%>%select(c(1))
t1x <- t1%>%select(-c(1))%>%slice(c(1:2064))
t1x <- cbind(t2_time, t1x)
co2 <- rbind(t1x, t2)
# Making a combined plot with means and SEM
fig_plug <- ggplot(data=co2, aes(x=time, y=co2_ppm, color = trmt)) +
scale_y_continuous(limits = c(0,0.005), breaks=seq(0, 0.005,0.001))+
scale_x_datetime(
date_labels = c("1", "5", "10", "15"),
breaks = c(
as_datetime('2021-12-22 15:30:00'),
as_datetime('2021-12-26 15:30:00'),
as_datetime('2021-12-31 15:30:00'),
as_datetime('2022-01-05 15:30:00')
),
limits = c(
as_datetime('2021-12-21 15:30:00'),
as_datetime('2022-01-05 15:30:00')
)
) +
# labs(title = "Plug-based biowaste",x="Time (days)", y=expression(CO[2]~(g)/dry~matter~(kg)), color="Treatment")+
# theme_pubr()+
# theme(axis.text = element_text(size = 11),
#       axis.title = element_text(size = 12),
#       axis.line = element_line(size = 0.4))+
# theme(#legend.position = c(0.8, 0.75),
#   legend.direction = "horizontal",
#   legend.title = element_text(size = 12),
#   legend.text = element_text(size = 10),
#   legend.position="top")+
scale_fill_manual(name="",
labels = c("Mat-based", "Plug-based"),
values = c("#e41a1c", "#377eb8"),
guide = guide_legend())+
scale_color_manual(name="",
labels = c("Mat-based", "Plug-based"),
values = c("#e41a1c", "#377eb8"),
guide = guide_legend())+
stat_summary(aes(color=trmt), fun  = "mean", geom = "line", size=0.85)+
stat_summary(aes(fill=factor(trmt)),colour = NA, geom = "ribbon", fun.data = mean_se, alpha = 0.35)
fig_plug
View(actual_co2_plug)
#Reading the co2 .csv file
actual_co2_plug <- read_csv("actual_co2_grams_plug.csv")%>%as_tibble()
View(actual_co2_plug)
View(actual_co2_plug)
#Manipulating Time
##Setting first column as date-time variable
data_master$time <- as_datetime(data_master$time)
librarian::shelf(plyr, dplyr, lubridate, tidyr, tibble, rstudioapi,
update_all = FALSE)
# Setting working directory
setwd(dirname(getActiveDocumentContext()$path))                                 # Set working directory to source file location
mydir="Raw"                                                                     #Mention the directory (as "mydir") in the W.Dir. containing the datafiles
myfiles= list.files(path=mydir, pattern="*.csv", full.names=TRUE)               #List all the .csv files in the specified "mydir" and assign it to "myfiles".
myfiles                                                                         #Shows all the files present
#Importing datafiles into single dataframe
data_master <- ldply(myfiles, read.table, sep = " ", fill=T, header = F)%>%     #collectively apply "impost function for all the files in the specified directory
as_tibble()%>%                                                                #Convert the imported data as a tibble
select(select = -c(V2:V4, V10, V11, V17, V18, V24, V25,                       #Selecting only the relevant columns
V31, V32, V38, V39, V45, V46, V52, V53,
V59, V60, V66, V67, V73, V74, V80, V81,
V87, V88, V94, V95, V101, V102, V108, V109,
V115, V116))%>%
#Rename all the columns while importing.
rename(time=V1,
sub_temp1=V5,co2_sample1=V6,scd30_temp1=V7,rh1=V8,wall_temp1=V9,
sub_temp2=V12,co2_sample2=V13,scd30_temp2=V14,rh2=V15,wall_temp2=V16,
sub_temp3=V19,co2_sample3=V20,scd30_temp3=V21,rh3=V22,wall_temp3=V23,
sub_temp4=V26,co2_sample4=V27,scd30_temp4=V28,rh4=V29,wall_temp4=V30,
sub_temp5=V33,co2_sample5=V34,scd30_temp5=V35,rh5=V36,wall_temp5=V37,
sub_temp6=V40,co2_sample6=V41,scd30_temp6=V42,rh6=V43,wall_temp6=V44,
sub_temp7=V47,co2_sample7=V48,scd30_temp7=V49,rh7=V50,wall_temp7=V51,
sub_temp8=V54,co2_sample8=V55,scd30_temp8=V56,rh8=V57,wall_temp8=V58,
sub_temp9=V61,co2_sample9=V62,scd30_temp9=V63,rh9=V64,wall_temp9=V65,
sub_temp10=V68,co2_sample10=V69,scd30_temp10=V70,rh10=V71,wall_temp10=V72,
sub_temp11=V75,co2_sample11=V76,scd30_temp11=V77,rh11=V78,wall_temp11=V79,
sub_temp12=V82,co2_sample12=V83,scd30_temp12=V84,rh12=V85,wall_temp12=V86,
sub_temp13=V89,co2_sample13=V90,scd30_temp13=V91,rh13=V92,wall_temp13=V93,
sub_temp14=V96,co2_sample14=V97,scd30_temp14=V98,rh14=V99,wall_temp14=V100,
sub_temp15=V103,co2_sample15=V104,scd30_temp15=V105,rh15=V106,wall_temp15=V107,
sub_temp16=V110,co2_sample16=V111,scd30_temp16=V112,rh16=V113,wall_temp16=V114,
sub_temp17=V117,co2_sample17=V118,scd30_temp17=V119,rh17=V120,wall_temp17=V121)
##Setting all the columns except 1st to as numeric
data_master[, 2:ncol(data_master)] <- lapply(data_master
[,2:ncol(data_master)],
as.numeric)
#Manipulating Time
##Setting first column as date-time variable
data_master$time <- as_datetime(data_master$time)
#Manipulating Time
##Setting first column as date-time variable
data_master$time <- as_datetime(data_master$time)
#Setting the time boundaries of the dataset.
data_plug <- subset(data_master,
time >= as_datetime('2021-12-21 10:30:00') &
time <= as_datetime('2022-01-05 15:30:00'))
View(data_plug)
str(data_plug)
#Making a dataset with only sampled CO2 from the raw data
##The numbers are the order number of the columns pertaining to CO2 sampling.
dataco2_plug <- select(data_plug, c(1, 3, 8, 13, 18, 23, 28,
33, 38, 43, 48, 53,
58, 63, 68, 73, 78, 83))
#Reference CO2 stropped working for brief time; replacing NA with specific value "460"
dataco2_plug <- dataco2_plug%>%mutate_at(c(18), ~ifelse(is.na(.), 460, .))
dataco2_plug <- dataco2_plug%>%mutate_at(c(2:17), ~ifelse(is.na(.), 0, .))
View(dataco2_plug)
##First, we need SCD30 temperature in Kelvin
convert_to_kelvin <- function(x, na.rm=FALSE) (x+273.15)
dataco2_plug <-  select(data_plug, c( 4, 9, 14, 19, 24, 29,
34, 39, 44, 49, 54,
59, 64, 69, 74, 79, 84))%>%
mutate_at(c(1:17),convert_to_kelvin, na.rm = TRUE)%>%
add_column(dataco2_plug, .before = 1)%>%
mutate_at(c(35), ~ifelse(is.na(.), 295, .))
#Calculating CO2-grams for each datapoint
{
dataco2_plug$co2_grams1 <- ((dataco2_plug$co2_sample1/dataco2_plug$scd30_temp1)*0.00001116657826)
dataco2_plug$co2_grams2 <- ((dataco2_plug$co2_sample2/dataco2_plug$scd30_temp2)*0.00001116657826)
dataco2_plug$co2_grams3 <- ((dataco2_plug$co2_sample3/dataco2_plug$scd30_temp3)*0.00001116657826)
dataco2_plug$co2_grams4 <- ((dataco2_plug$co2_sample4/dataco2_plug$scd30_temp4)*0.00001116657826)
dataco2_plug$co2_grams5 <- ((dataco2_plug$co2_sample5/dataco2_plug$scd30_temp5)*0.00001116657826)
dataco2_plug$co2_grams6 <- ((dataco2_plug$co2_sample6/dataco2_plug$scd30_temp6)*0.00001116657826)
dataco2_plug$co2_grams7 <- ((dataco2_plug$co2_sample7/dataco2_plug$scd30_temp7)*0.00001116657826)
dataco2_plug$co2_grams8 <- ((dataco2_plug$co2_sample8/dataco2_plug$scd30_temp8)*0.00001116657826)
dataco2_plug$co2_grams9 <- ((dataco2_plug$co2_sample9/dataco2_plug$scd30_temp9)*0.00001116657826)
dataco2_plug$co2_grams10 <- ((dataco2_plug$co2_sample10/dataco2_plug$scd30_temp10)*0.00001116657826)
dataco2_plug$co2_grams11 <- ((dataco2_plug$co2_sample11/dataco2_plug$scd30_temp11)*0.00001116657826)
dataco2_plug$co2_grams12 <- ((dataco2_plug$co2_sample12/dataco2_plug$scd30_temp12)*0.00001116657826)
dataco2_plug$co2_grams13 <- ((dataco2_plug$co2_sample13/dataco2_plug$scd30_temp13)*0.00001116657826)
dataco2_plug$co2_grams14 <- ((dataco2_plug$co2_sample14/dataco2_plug$scd30_temp14)*0.00001116657826)
dataco2_plug$co2_grams15 <- ((dataco2_plug$co2_sample15/dataco2_plug$scd30_temp15)*0.00001116657826)
dataco2_plug$co2_grams16 <- ((dataco2_plug$co2_sample16/dataco2_plug$scd30_temp16)*0.00001116657826)
dataco2_plug$co2_grams17 <- ((dataco2_plug$co2_sample17/dataco2_plug$scd30_temp17)*0.00001116657826)
}
View(dataco2_plug)
dataco2_grams_plug <- dataco2_plug%>% select(-c(2:35))
View(dataco2_grams_plug)
#Making a dataset with "actual" CO2 readings (with ambient readings subtracted)
dataco2_grams_actual_plug <-  dataco2_grams_plug  %>%  mutate(dataco2_grams_plug[2:ncol(dataco2_grams_plug)] - co2_grams17)
View(dataco2_grams_actual_plug)
#Converting all the negative values in the columns (in dataco2_actual) to zero.
##Assign the columns to be converted as "columns_to_convert".
columns_to_convert <- c(2:18)
#Mention the function: If negative>convert to 0; If not> let it be.
replace_with_zero <- function(x, na.rm=FALSE) (ifelse(x < 0, yes = 0, no = x))
##Choose the parent datafile (dataco2_actual) to be mutated at the columns assigned,
## as the predefined function.
dataco2_grams_actual_plug <- dataco2_grams_actual_plug %>% mutate_at(columns_to_convert,
replace_with_zero, na.rm = TRUE)%>%
rename_with( ~ gsub("sample", "actual", .x, fixed = TRUE), .cols = c(2:18))    #Renaming to substitute "sample" in the column names to "actual".
colnames(dataco2_grams_actual_plug)
head(dataco2_grams_actual_plug)
#Exporting the actual CO2 (ppm) datafile  as a .csv
write.csv(dataco2_grams_actual_plug,"CO2_grams/actual_co2_grams_plug.csv", row.names = FALSE)
##Setup working Directory
setwd(dirname(getActiveDocumentContext()$path))                                 # Set working directory to source file location
#Reading the co2 .csv file
actual_co2_plug <- read_csv("actual_co2_grams_plug.csv")%>%as_tibble()
View(actual_co2_plug)
#Manipulating Time
##Setting first column as date-time variable
actual_co2_plug$time <- as_datetime(actual_co2_plug$time)
#Reducing the dataset by reducing sampling interval
groups <- cut(as.POSIXct(actual_co2_plug$time), breaks="30 min")
library(plyr)
actual_co2_plug <- ddply(actual_co2_plug, "groups", tail, 1)[, -1]
View(actual_co2_plug)
t2 <- actual_co2_plug %>%
select(time, co2_grams7, co2_grams10,  co2_grams16) %>%
mutate(time = as_datetime(paste0(time, "-01"))) %>%
gather(vessel, co2_ppm, -time) %>%
filter(complete.cases(.))%>%
add_column(trmt = "plug")%>%
mutate(co2_ppm = co2_ppm/47.7)   # dividing by total dry matter in the vessel
View(t2)
View(t2)
t2$co2_ppm <- t2$co2_ppm*1000
##Setup working Directory
setwd(dirname(getActiveDocumentContext()$path))                                 # Set working directory to source file location
#Reading the co2 .csv file
co2_grams_peat <- read_csv("actual_co2_grams_peat.csv")
head(co2_grams_peat)
#Manipulating Time
##Setting first column as date-time variable
co2_grams_peat$time <- as_datetime(co2_grams_peat$time)
#Reducing the dataset by reducing sampling interval
groups <- cut(as.POSIXct(co2_grams_peat$time), breaks="30 min")
library(plyr)
co2_grams_peat <- ddply(co2_grams_peat, "groups", tail, 1)[, -1]
t1 <- co2_grams_peat %>%
select(time, co2_grams1, co2_grams13, co2_grams16) %>%
mutate(time = as_datetime(paste0(time, "-01"))) %>%
gather(vessel, co2_ppm, -time) %>%
filter(complete.cases(.))%>%
add_column(trmt = "peat")%>%
mutate(co2_ppm = co2_ppm/57.89)
# Converting "grams CO2 per gram" DM TO  "grams CO2 per kg DM"
t1$co2_ppm <- t1$co2_ppm*1000
t2_time <- t2%>%select(c(1))
t1x <- t1%>%select(-c(1))%>%slice(c(1:2068))
t1x <- cbind(t2_time, t1x)
co2 <- rbind(t1x, t2)
# Making a combined plot with means and SEM
fig_plug <- ggplot(data=co2, aes(x=time, y=co2_ppm, color = trmt)) +
scale_y_continuous(limits = c(0,0.005), breaks=seq(0, 0.005,0.001))+
scale_x_datetime(
date_labels = c("1", "5", "10", "15"),
breaks = c(
as_datetime('2021-12-22 15:30:00'),
as_datetime('2021-12-26 15:30:00'),
as_datetime('2021-12-31 15:30:00'),
as_datetime('2022-01-05 15:30:00')
),
limits = c(
as_datetime('2021-12-21 15:30:00'),
as_datetime('2022-01-05 15:30:00')
)
) +
# labs(title = "Plug-based biowaste",x="Time (days)", y=expression(CO[2]~(g)/dry~matter~(kg)), color="Treatment")+
# theme_pubr()+
# theme(axis.text = element_text(size = 11),
#       axis.title = element_text(size = 12),
#       axis.line = element_line(size = 0.4))+
# theme(#legend.position = c(0.8, 0.75),
#   legend.direction = "horizontal",
#   legend.title = element_text(size = 12),
#   legend.text = element_text(size = 10),
#   legend.position="top")+
scale_fill_manual(name="",
labels = c("Mat-based", "Plug-based"),
values = c("#e41a1c", "#377eb8"),
guide = guide_legend())+
scale_color_manual(name="",
labels = c("Mat-based", "Plug-based"),
values = c("#e41a1c", "#377eb8"),
guide = guide_legend())+
stat_summary(aes(color=trmt), fun  = "mean", geom = "line", size=0.85)+
stat_summary(aes(fill=factor(trmt)),colour = NA, geom = "ribbon", fun.data = mean_se, alpha = 0.35)
fig_plug
# Making a combined plot with means and SEM
fig_plug <- ggplot(data=co2, aes(x=time, y=co2_ppm, color = trmt)) +
scale_y_continuous(limits = c(0,0.005), breaks=seq(0, 0.005,0.001))+
scale_x_datetime(
date_labels = c("1", "5", "10", "15"),
breaks = c(
as_datetime('2021-12-22 15:30:00'),
as_datetime('2021-12-26 15:30:00'),
as_datetime('2021-12-31 15:30:00'),
as_datetime('2022-01-05 15:30:00')
),
limits = c(
as_datetime('2021-12-21 15:30:00'),
as_datetime('2022-01-05 15:30:00')
)
) +
labs(x="Time (days)", y=expression(CO[2]~(g)/dry~matter~(kg)), color="Treatment")+
theme_pubr()+
theme(axis.text = element_text(size = 11),
axis.title = element_text(size = 12),
axis.line = element_line(size = 0.4))+
theme(#legend.position = c(0.8, 0.75),
legend.direction = "horizontal",
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
legend.position="top")+
scale_fill_manual(name="",
labels = c("Mat-based", "Plug-based"),
values = c("#e41a1c", "#377eb8"),
guide = guide_legend())+
scale_color_manual(name="",
labels = c("Mat-based", "Plug-based"),
values = c("#e41a1c", "#377eb8"),
guide = guide_legend())+
stat_summary(aes(color=trmt), fun  = "mean", geom = "line", size=0.85)+
stat_summary(aes(fill=factor(trmt)),colour = NA, geom = "ribbon", fun.data = mean_se, alpha = 0.35)
fig_plug
View(t1)
View(t2_time)
ggsave(file="co2_linegraph.pdf", plot=figure, width=10, height=4)
# Making a combined plot with means and SEM
fig <- ggplot(data=co2, aes(x=time, y=co2_ppm, color = trmt)) +
scale_y_continuous(limits = c(0,0.005), breaks=seq(0, 0.005,0.001))+
scale_x_datetime(
date_labels = c("1", "5", "10", "15"),
breaks = c(
as_datetime('2021-12-22 15:30:00'),
as_datetime('2021-12-26 15:30:00'),
as_datetime('2021-12-31 15:30:00'),
as_datetime('2022-01-05 15:30:00')
),
limits = c(
as_datetime('2021-12-21 15:30:00'),
as_datetime('2022-01-05 15:30:00')
)
) +
labs(x="Time (days)", y=expression(CO[2]~(g)/dry~matter~(kg)), color="Treatment")+
theme_pubr()+
theme(axis.text = element_text(size = 11),
axis.title = element_text(size = 12),
axis.line = element_line(size = 0.4))+
theme(#legend.position = c(0.8, 0.75),
legend.direction = "horizontal",
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
legend.position="top")+
scale_fill_manual(name="",
labels = c("Mat-based", "Plug-based"),
values = c("#e41a1c", "#377eb8"),
guide = guide_legend())+
scale_color_manual(name="",
labels = c("Mat-based", "Plug-based"),
values = c("#e41a1c", "#377eb8"),
guide = guide_legend())+
stat_summary(aes(color=trmt), fun  = "mean", geom = "line", size=0.85)+
stat_summary(aes(fill=factor(trmt)),colour = NA, geom = "ribbon", fun.data = mean_se, alpha = 0.35)
ggsave(file="co2_linegraph.pdf", plot=fig, width=10, height=4)
ggsave(file="co2_linegraph.pdf", plot=fig, width = 5.83,
height = 4.13)
